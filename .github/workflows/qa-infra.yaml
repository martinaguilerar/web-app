name: Build QA environment with Terraform

on:
  push:
    branches:
    - main
    paths:
    - 'terraform/qa/**'
    - 'src/**'
    - './*.js'
    - './*.json'
  pull_request:
    branches:
    - main

permissions:
  issues: write
  pull-requests: write

env:
  TF_VAR_azure_client_id: "${{ secrets.TF_VAR_AZURE_CLIENT_ID }}"
  TF_VAR_azure_subscription_id: "${{ secrets.TF_VAR_AZURE_SUBSCRIPTION_ID }}"
  TF_VAR_azure_tenant_id: "${{ secrets.TF_VAR_AZURE_TENANT_ID }}"
  TF_VAR_azure_client_secret: "${{ secrets.TF_VAR_AZURE_CLIENT_SECRET }}"
  ARM_CLIENT_ID: "${{ secrets.TF_VAR_AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.TF_VAR_AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.TF_VAR_AZURE_TENANT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.TF_VAR_AZURE_CLIENT_SECRET }}"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    defaults:
      run:
        working-directory: "terraform/qa"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=backend.conf

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi

    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: terraform/qa/tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: mshick/add-pr-comment@v2
      with:
          message: "${{ steps.tf-plan-string.outputs.summary }}"

  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    defaults:
      run:
        working-directory: "terraform/qa"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=backend.conf

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: terraform/qa/.
    
    - name: Approve Terraform apply
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ secrets.GH_TOKEN }}
        approvers: martinaguilerar
        minimum-approvals: 1
        issue-title: "Applying Terraform changes into QA environment"
        issue-body: "Please approve or deny the application of Terraform changes into QA environment"
        exclude-workflow-initiator-as-approver: false

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

  build-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: '18.x'

      - name: npm install, build, and test
        run: |
          npm install
          npm run build --if-present 

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: node-app
          path: .

  deploy-app:
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    needs:
      - build-app

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v2
      with:
        name: node-app
    
    - name: Approve Web App Deployment to QA
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ secrets.GH_TOKEN }}
        approvers: martinaguilerar
        minimum-approvals: 1
        issue-title: "Deploying Web App to QA Environment"
        issue-body: "Please approve or deny the deployment of Web App to QA Environment"
        exclude-workflow-initiator-as-approver: false
    
    - name: 'Deploy to Azure Web App'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'mywebapp-maar'
        slot-name: 'qa'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_QA }}
        package: .